{#- used for templating out test scenario configs - libvirt only for now -#}
{#- also i have to assign this var here to get rid of the quotes -#}
{%- set vh = namespace(virthost=env("virthost")) -%}
{%- set git = namespace(commitid=env("commitid")) -%}
{%- set box = namespace(name=env("boxname")) -%}
---
# AUTO-GENERATED by test-fsa.sh - remove this comment to exempt
driver:
  name: vagrant
  provider:
    name: libvirt
    type: libvirt
  ssh_connection_options:
    - '-o StrictHostKeyChecking=no'
    - '-o UserKnownHostsFile=/dev/null'
{%- if vh.virthost != "" %}
    - '-o ProxyCommand="ssh -W %h:%p -q {{ vh.virthost }}"'
{%- endif %}
platforms:
{%- for machine in machines %}
  - name: {{ machine.name }}-{{ box.name if box.name != "" else machine.box }}-{{ git.commitid }}
    box: {{ box.name if box.name != "" else machine.box }}
    memory: 1024
    cpus: 1
{%- if machine.box_url is defined %}
    box_url: {{ machine.box_url }}
{%- endif %}
    interfaces:
      - auto_config: false
        network_name: private_network
        libvirt__network_name: drone-{{ box.name if box.name != "" else machine.box }}-{{ git.commitid }}
        ip: {{(( box.name if box.name != "" else machine.box ) ~ git.commitid ) | network_addr }} # this line is required to set the network address
    instance_raw_config_args:
      - 'vm.synced_folder ".", "/vagrant", disabled: true'
    config_options:
      synced_folder: false
      ssh.remote_user: "vagrant"
      ssh.keep_alive: yes
      ssh.shell: sh -l
    provider_options:
      sound_type: usb
      cpu_mode: 'host-passthrough'
      graphics_type: 'none'
      driver: "kvm"
{%- if vh.virthost != "" %}
      connect_via_ssh: true
      host: {{ vh.virthost }}
      proxy_command: "ssh -W %h:%p -q {{ vh.virthost }}"
{%- endif %}
{%- endfor %}
provisioner:
  name: ansible
  options:
    # ansible diff mode
    D: true
  config_options:
    defaults:
      stdout_callback: debug
      interpreter_python: auto_silent
  connection_options:
    ansible_ssh_user: vagrant
    ansible_become: true
{%- if vh.virthost != "" %}
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -W %h:%p -q {{ vh.virthost }}"'
{%- else %}
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
{%- endif %}
  env:
    ANSIBLE_ROLES_PATH: "../../roles/"
{#- selectattr doesnt work for some reason, so do it manually... -#}
{%- set counter = namespace(counter="0") -%}
{% for machine in machines -%}
{% if machine.vars is defined and counter.counter == "0" -%}
{%- set counter.counter="1" %}
  inventory:
    host_vars:
{%- endif -%}
{%- endfor -%}
{%- for machine in machines -%}
{%- if machine.vars is defined %}
      {{ machine.name }}-{{ box.name if box.name != "" else machine.box }}-{{ git.commitid }}:
{{ machine.vars | yaml_pretty }}
{%- endif -%}
{%- endfor %}
verifier:
  name: {{ verifier | default('testinfra') }}
{%- if verifier | default('testinfra') == "testinfra" %}
  options:
    connection: ansible
{%- endif %}
scenario:
  test_sequence:
      - destroy
      - create
{%- if scenario is defined -%}
{%- for step in scenario %}
      - {{ step }}
{%- endfor %}
{%- else %}
      - converge
      - idempotence
      - verify
{%- endif %}
      - destroy
