<domain type='kvm'>
  <name>{{ item.name }}</name>
{% for uuid in uuids.results %}
{% if uuid.item.name == item.name and uuid.stdout != "" %}
  <uuid>{{ uuid.stdout }}</uuid>
{% endif %}
{% endfor %}
{% if 'M' in item.mem %}
  <memory unit='MiB'>{{ item.mem|replace('M', '') }}</memory>
  <currentMemory unit='GiB'>{{ item.mem|replace('M', '') }}</currentMemory>
{% elif 'G' in item.mem %}
  <memory unit='GiB'>{{ item.mem|replace('G', '') }}</memory>
  <currentMemory unit='GiB'>{{ item.mem|replace('G', '') }}</currentMemory>
{% endif %}
  <vcpu placement='static'>1</vcpu>
  <os>
    <type arch='x86_64' machine='pc'>hvm</type>
{% if item.iso is defined or item.install is defined %}
    <boot dev='cdrom'/>
{% else %}
    <boot dev='hd'/>
{% endif %}
  </os>
  <features>
    <acpi/>
    <apic/>
    <vmport state='off'/>
  </features>
  <cpu mode='host-passthrough' check='none'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
{% if item.iso is defined or item.install is defined %}
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
{% if item.iso is defined %}
{% if item.iso == 'debian' or item.iso == 'alpine' or item.iso == 'openbsd' %}
      <source file='/home/isos/{{ item.iso }}-fsa-latest.iso'/>
{% else %}
      <source file='{{ item.iso }}'/>
{% endif %}
{% elif item.install is defined %}
      <source file='/home/isos/{{ item.install.os }}-fsa-latest.iso'/>
{% endif %}
      <backingStore/>
      <target dev='hda' bus='ide'/>
      <readonly/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
    </disk>
{% endif %}
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/home/vms/{{ item.name }}.img'/>
      <backingStore/>
      <target dev='vda' bus='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0'/>
    </disk>
    <controller type='usb' index='0' model='ich9-ehci1'>
      <alias name='usb'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x7'/>
    </controller>
    <controller type='usb' index='0' model='ich9-uhci1'>
      <alias name='usb'/>
      <master startport='0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0' multifunction='on'/>
    </controller>
    <controller type='usb' index='0' model='ich9-uhci2'>
      <alias name='usb'/>
      <master startport='2'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x1'/>
    </controller>
    <controller type='usb' index='0' model='ich9-uhci3'>
      <alias name='usb'/>
      <master startport='4'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x2'/>
    </controller>
    <controller type='pci' index='0' model='pci-root'>
      <alias name='pci.0'/>
    </controller>
    <controller type='ide' index='0'>
      <alias name='ide'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <controller type='virtio-serial' index='0'>
      <alias name='virtio-serial0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </controller>
{% if item.install is defined %}
    <interface type='bridge'>
      <source bridge='virbr1'/>
{% elif item.private | default(false) %}
    <interface type='bridge'>
      <source bridge='virbr0'/>
{% else %}
    <interface type='bridge'>
      <source bridge='br0'/>
{% endif %}
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
{% if item.install is defined %}
      <mac address='{{ '8a:d8:ad' | community.general.random_mac(seed=item.name) }}'/>
{% elif item.mac is defined %}
      <mac address='{{ item.mac }}'/>
{% else %}
      <mac address='{{ random_mac_prefix | community.general.random_mac(seed=ansible_hostname) | replace('\n', '') }}'/>
{% endif %}
    </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
  </devices>
</domain>
