---
- name: "obsd : httpd : determine if first run"
  ansible.builtin.service_facts:
# need to start the http with the main conf, but without the website confs
# for the generic LE catchall to work, for the LE hook to run, for the certs to be there for httpd restart
- name: "obsd : httpd : template provisional config"
  ansible.builtin.template:
    src: httpd.LE.conf.j2
    dest: /etc/httpd.conf
    mode: 0600
  when: ansible_facts.services.httpd.state != 'running'

- name: "obsd : httpd : start the service"
  ansible.builtin.service:
    name: httpd
    state: started
  when: ansible_facts.services.httpd.state != 'running'

- name: "obsd : httpd : template the main config"
  ansible.builtin.template:
    src: httpd.main.conf.j2
    dest: /etc/httpd.conf
    mode: 0600
  notify:
    - httpd_syntax
    - httpd_restart

- name: "obsd : httpd : template websites"
  ansible.builtin.template:
    src: httpd.sites.conf.j2
    dest: "/etc/httpd.{{ site.name }}.conf"
    mode: 0600
  loop: "{{ web.sites }}"
  loop_control:
    loop_var: site
  notify:
    - httpd_syntax
    - httpd_restart
  when: web.sites is defined and site.root is defined

- name: "obsd : httpd : create webroots"
  ansible.builtin.file:
    path: "/var/www{{ site.root }}"
    state: directory
    owner: root
    group: daemon
    mode: 0755
  when: web.sites is defined and site.root is defined
  loop: "{{ web.sites }}"
  loop_control:
    loop_var: site
  notify:
    - httpd_syntax
    - httpd_restart

- name: "obsd : httpd : setup virt autoinstall root"
  ansible.builtin.file:
    path: /var/www/vmd_autoinstall
    state: directory
    owner: root
    group: daemon
    mode: 0755
  when: virt.vms is defined and virt.vms|selectattr('install', 'defined')|length > 0
  notify:
    - httpd_syntax
    - httpd_restart

- name: "obsd : httpd : setup authfile" # noqa risky-shell-pipe
  ansible.builtin.shell: echo {{ item.user }}:{{ item.pass }} | htpasswd -I /var/www/.auth && chmod 0640 /var/www/.auth
  when: web.httpd.auth is defined
  changed_when: false
  loop: "{{ web.httpd.auth }}"
