---
- name: "alpine : install bridge"
  community.general.apk:
    name: bridge
    state: present
    update_cache: true

- name: "alpine : configure interfaces"
  ansible.builtin.template:
    src: alpine_interfaces.j2
    dest: /etc/network/interfaces
    mode: 0600
  register: netchange

- name: "alpine : enable routing"
  ansible.builtin.lineinfile:
    path: /etc/sysctl.conf
    create: true
    mode: 0600
    line: net.ipv4.conf.all.forwarding=1
  when: net.routing |default(false)
  notify:
    - sysctl_forwarding

- name: "alpine : enable vlan"
  community.general.apk:
    name: vlan
    state: present
  when: net.ifaces | selectattr('vlanid', 'defined') | length > 0

- name: "alpine : net : load kernel modules"
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - tun
    - tap
    - br_netfilter
  when: virt is defined

- name: "alpine : net : also on boot"
  ansible.builtin.lineinfile:
    path: /etc/modules
    line: "{{ item }}"
    state: present
  loop:
    - tun
    - tap
    - br_netfilter
  when: virt is defined

# the way alpine does networking restarts is kill everything, then bring everything up
# that kills the ansible ssh connec, which kills the restart before it can complete
# we work around it by templating out a script and execing it
# todo: write ifconfig abstraction? this "changed" thing is a hack
- name: "alpine : template restart script"
  ansible.builtin.template:
    src: alpine_netrestart.sh.j2
    dest: /tmp/alpine_netrestart.sh
    mode: 0755
  when: virt is defined and netchange.changed

- name: "alpine : exec it"
  ansible.builtin.shell: "sleep 1 & sh /tmp/alpine_netrestart.sh &"
  when: virt is defined and netchange.changed
  changed_when: false
  async: 10
  poll: 0

- name: "alpine : wait for return"
  ansible.builtin.wait_for:
    timeout: 5
  delegate_to: localhost

- name: "alpine : wait for return"
  wait_for_connection:
    timeout: 600
  when: virt is defined and netchange.changed
